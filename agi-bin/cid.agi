#!/usr/bin/perl

#*********************************************************************************
# Liz is a  VoIP Plugin for SugarCRM program developed by TalkTo-Outdare,
# Inc. Copyright (C) 2004 - 2009 TalkTo-Outdare Inc.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License version 3 as published by the
# Free Software Foundation with the addition of the following permission added
# to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED WORK
# IN WHICH THE COPYRIGHT IS OWNED BY TalkTo-Outdare, TalkTo-Outdare DISCLAIMS
# THE WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, see http://www.gnu.org/licenses or write to the Free
# Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 USA.
#
# You can contact TalkTo-Outdare, headquarters at Saturnusstraat 60 unit 15,
# Den Haag, 2516 AH, The Netherlands. or at email address info@TalkTo-Outdare.com.
#
# The interactive user interfaces in modified source and object code versions
# of this program must display Appropriate Legal Notices, as required under
# Section 5 of the GNU General Public License version 3.
#
# In accordance with Section 7(b) of the GNU General Public License version 3,
# these Appropriate Legal Notices must retain the display of the "Powered by
# TalkTo-Outdare" logo. If the display of the logo is not reasonably feasible for
# technical reasons, the Appropriate Legal Notices must display the words
# "Powered by TalkTo-Outdare".
#********************************************************************************



# timeout for the entire script; in seconds
$TIMEOUT = 5;

# how frequently a secondary thread will poll if the lookup is completed yet
$LOOPDELAY = 0.2;

# how much digits of a phone number will be matched
$ACCURACY = 7;

# ------

use SOAP::Lite;
use Asterisk::AGI;
use Digest::MD5 qw(md5_hex);
use Time::HiRes qw(time);

$AGI = new Asterisk::AGI;
%agi = $AGI->ReadParse();

my $origcidnum = $AGI->get_variable("ORIGCIDNUM");
my $origcidname = $AGI->get_variable("ORIGCIDNAME");
my $sugaroutgoing = $AGI->get_variable("SUGAROUTGOING");

# if this is an outgoing call initiated from sugar, no need to lookup the callerid name
exit if ($sugaroutgoing);

# if this is a transferred call, use the cached cid num/name information then exit
if ($origcidnum) {
  debug("Transferred call, using original cid: $origcidnum",5);
  $AGI->set_variable("CALLERID(num)",$origcidnum);
  $AGI->set_variable("CALLERID(name)","-> " . $origcidname);
  
  exit;
} 

my $cidnum = $agi{callerid};

# pointless to continue if there is no callerid num for this call 
exit if (!$cidnum || $cidnum eq "unknown");

# very small sleep to prevent two call legs entering at exactly the same time
zleep(rand()/5);

my $status = $AGI->database_get("SUGAR_CID","$cidnum");
my $statust = $AGI->database_get("SUGAR_TIMEOUT","$cidnum");

if ($status && $statust ne "" && (time() - $statust) <= $TIMEOUT) {
  # the callerid name for this number is already being looked up by another 'thread'
  # wait until the other thread is done, then retrieve the information from astdb
  my $c=0;
  while ($status eq "1") {
    if ($c++ >= ($TIMEOUT/$LOOPDELAY)) {
      debug("Timeout while waiting for another process to lookup the callerid",2);
      $status = "";
      last;
    }
    zleep($LOOPDELAY);
    $status = $AGI->database_get("SUGAR_CID","$cidnum");
  }

  debug("Secondary thread found cidname: $status",5);
  
  $AGI->set_variable("CALLERID(name)",$status);
  $AGI->set_variable("__ORIGCIDNAME",$status);
  $AGI->set_variable("__ORIGCIDNUM",$cidnum);
  
} else {
  # we're the first (or only) 'thread' to start a lookup for this callerid. indicate
  # to astdb that we're working on the lookup, and at which time the lookup started
  $AGI->database_put("SUGAR_CID","$cidnum","1");
  $AGI->database_put("SUGAR_TIMEOUT","$cidnum",time());
  
  # fetch the cidname from soap, store it, and let asterisk know
  my $cidname = soapGet($cidnum);
  debug("Primary thread found cidname: $cidname",4);
  
  $AGI->database_put("SUGAR_CID","$cidnum",'"' . $cidname . '"'); # AGI.pm doesnt add quotes properly here
  
  $AGI->set_variable("CALLERID(name)",$cidname);
  $AGI->set_variable("__ORIGCIDNAME",$cidname);
  $AGI->set_variable("__ORIGCIDNUM",$cidnum);
  
  # maybe move this line of code to sugarend.agi
  zleep($LOOPDELAY + 0.1);
  $AGI->database_del("SUGAR_CID","$cidnum");
  $AGI->database_del("SUGAR_TIMEOUT","$cidnum");
}

sub soapGet() {
  my $number = shift;

  my $starttime = time();
  my ($firstname,$lastname,$accountname,$cidstring,$regje);
  my ($user,$pass,$host,$service,$result,$cid);
  
  $user = $AGI->get_variable('SUGAR_USER');
  $pass = $AGI->get_variable('SUGAR_PASS');
  $host = $AGI->get_variable('SUGAR_HOST');

  debugAndQuit("Bad login information specified in config") if (!$user || !$pass || !$host);
  
  $number =~ s/\D//g;
  $number =~ m/([0-9]{$ACCURACY})$/;
  $number = $1 if ($1);
  my $simplequery = 0;
  
  if ($1) {

  } elsif($number) {
    $simplequery = 1;
  } else {
    debugAndQuit("No caller ID found for this call");
  }
  
  #debug("Searching for regexp $regje",5);  
  
  # create the soap object
  $service = SOAP::Lite
      -> uri("$host")
      -> proxy("$host/soap.php", timeout => $TIMEOUT);
  
  # login to retreive a session id
  $result = $service->login({user_name => $user, password => md5_hex($pass)}, "sugarcrm")->result;
  $sid = $result->{id};
  
  return if ((time() - $starttime) > $TIMEOUT);
  debugAndQuit("Couldn't login to Sugar") if (!$sid);
  debug("Got sid: $sid",5);
  
  # lookup the number @ contacts
  $str = buildquery('contacts.phone_home',$number,$simplequery)." OR ".buildquery('contacts.phone_work',$number,$simplequery)." OR ".buildquery('contacts.phone_mobile',$number,$simplequery)." OR ".buildquery('contacts.phone_other',$number,$simplequery)." OR ".buildquery('contacts.phone_fax',$number,$simplequery);
  $result = $service->get_entry_list($sid,"Contacts",$str,"",0,{a=>"first_name",b=>"last_name",c=>"account_name"},1,0)->result;
  $id = $result->{entry_list}[0]{id};
  
  if ($id) {
    $firstname = $result->{entry_list}[0]->{name_value_list}[0]{value};
    $lastname = $result->{entry_list}[0]->{name_value_list}[1]{value};
    $accountname = $result->{entry_list}[0]->{name_value_list}[2]{value};
    $cidstring = "$firstname $lastname" . ($accountname eq "" ? "" : " ($accountname)");
  } else {
    # or @ accounts
    return if ((time() - $starttime) > $TIMEOUT);
    
    $str = buildquery('accounts.phone_office',$number,$simplequery)." OR ".buildquery('accounts.phone_alternate',$number,$simplequery)." OR ".buildquery('accounts.phone_fax',$number,$simplequery);
    $result = $service->get_entry_list($sid,"Accounts",$str,"",0,{a=>"name"},1,0)->result;
    $id = $result->{entry_list}[0]{id};
    $cidstring = $accountname = $result->{entry_list}[0]->{name_value_list}[0]{value};
  }
  
  $cidstring =~ s/^\s+|\s+$//g;
  debug("Found callerid name: $cidstring",5) if ($cidstring);
  
  debug((time() - $starttime) . " seconds elapsed",2); 
  
  return $cidstring;
}

sub buildquery() {
  my $colname = shift;
  my $number = shift;
  my $simplequery = shift;
  
  if ($simplequery) {
    return "$colname LIKE '$number'";
  } else {
    return "RIGHT(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(" . $colname . ",' ',''),'(0',''),'+',''),'-',''),'(',''),')',''),'+','')," . $ACCURACY . ") LIKE '" . $number . "'";    
  }
}

sub zleep() {
  # perl can't do sleep() for values under a second
  select(undef, undef, undef, shift);
}

sub debugAndQuit() {
  my $text = shift;
  $AGI->verbose($text,0);
  die($text);
}

sub debug() {
  my $text = shift;
  my $level = shift || 0;
  $AGI->verbose($text,$level);
  # print STDERR "$text \n";
}